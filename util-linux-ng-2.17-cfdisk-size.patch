diff -up util-linux-ng-2.17.2/fdisk/cfdisk.c.kzak util-linux-ng-2.17.2/fdisk/cfdisk.c
--- util-linux-ng-2.17.2/fdisk/cfdisk.c.kzak	2010-03-22 09:05:41.000000000 +0100
+++ util-linux-ng-2.17.2/fdisk/cfdisk.c	2011-08-09 15:05:10.735229035 +0200
@@ -177,7 +177,6 @@ int heads = 0;
 int sectors = 0;
 long long cylinders = 0;
 int cylinder_size = 0;		/* heads * sectors */
-long long total_size = 0;	/* actual_size rounded down */
 long long actual_size = 0;	/* (in 512-byte sectors) - set using ioctl */
 				/* explicitly given user values */
 int user_heads = 0, user_sectors = 0;
@@ -879,7 +878,7 @@ del_part(int i) {
     if (i < num_parts - 1)
 	p_info[i].last_sector = p_info[i+1].first_sector - 1;
     else
-	p_info[i].last_sector = total_size - 1;
+	p_info[i].last_sector = actual_size - 1;
 
     p_info[i].offset = 0;
     p_info[i].flags = 0;
@@ -928,7 +927,7 @@ add_part(int num, int id, int flags, lon
 	return -1;
     }
 
-    if (first >= total_size) {
+    if (first >= actual_size) {
 	*errmsg = _("Partition begins after end-of-disk");
 	return -1;
     }
@@ -938,11 +937,6 @@ add_part(int num, int id, int flags, lon
 	return -1;
     }
 
-    if (last >= total_size) {
-	*errmsg = _("Partition ends in the final partial cylinder");
-	return -1;
-    }
-
     for (i = 0; i < num_parts; i++) {
 	if (p_info[i].id > 0 && IS_PRIMARY(p_info[i].num))
 	    pri++;
@@ -1637,8 +1631,7 @@ decide_on_geometry(void) {
     if (user_cylinders > 0)
 	    cylinders = user_cylinders;
 
-    total_size = cylinder_size*cylinders;
-    if (total_size > actual_size)
+    if (cylinder_size * cylinders > actual_size)
 	    print_warning(_("You specified more cylinders than fit on disk"));
 }
 
@@ -1646,7 +1639,7 @@ static void
 clear_p_info(void) {
     num_parts = 1;
     p_info[0].first_sector = 0;
-    p_info[0].last_sector = total_size - 1;
+    p_info[0].last_sector = actual_size - 1;
     p_info[0].offset = 0;
     p_info[0].flags = 0;
     p_info[0].id = FREE_SPACE;
@@ -2429,7 +2422,7 @@ change_geometry(void) {
     if (ret_val) {
 	long long disk_end;
 
-	disk_end = total_size-1;
+	disk_end = actual_size-1;
 
 	if (p_info[num_parts-1].last_sector > disk_end) {
 	    while (p_info[num_parts-1].first_sector > disk_end) {
