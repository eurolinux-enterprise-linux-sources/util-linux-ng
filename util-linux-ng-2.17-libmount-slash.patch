diff -up util-linux-ng-2.17.2/shlibs/mount/src/fs.c.kzak util-linux-ng-2.17.2/shlibs/mount/src/fs.c
--- util-linux-ng-2.17.2/shlibs/mount/src/fs.c.kzak	2014-06-12 12:40:30.650000001 +0200
+++ util-linux-ng-2.17.2/shlibs/mount/src/fs.c	2014-06-12 14:31:41.099002943 +0200
@@ -21,6 +21,7 @@
 
 #include "nls.h"
 #include "mountP.h"
+#include "strutils.h"
 
 /**
  * mnt_new_fs:
@@ -182,6 +183,51 @@ int mnt_fs_set_source(mnt_fs *fs, const 
 	return rc;
 }
 
+/*
+ * mnt_fs_streq_target:
+ * @fs: fs
+ * @path: mount point
+ *
+ * Compares @fs target path with @path. The trailing slash is ignored.
+ * See also mnt_fs_match_target().
+ *
+ * Returns: 1 if @fs target path equal to @path, otherwise 0.
+ */
+int mnt_fs_streq_target(mnt_fs *fs, const char *path)
+{
+	assert(fs);
+	return fs && streq_except_trailing_slash(mnt_fs_get_target(fs), path);
+}
+
+/*
+ * mnt_fs_streq_srcpath:
+ * @fs: fs
+ * @path: source path
+ *
+ * Compares @fs source path with @path. The trailing slash is ignored.
+ * See also mnt_fs_match_source().
+ *
+ * Returns: 1 if @fs source path equal to @path, otherwise 0.
+ */
+int mnt_fs_streq_srcpath(mnt_fs *fs, const char *path)
+{
+	const char *p;
+
+	assert(fs);
+	if (!fs)
+		return 0;
+
+	p = mnt_fs_get_srcpath(fs);
+
+	if (!(fs->flags & MNT_FS_PSEUDO))
+		return streq_except_trailing_slash(p, path);
+
+	if (!p && !path)
+		return 1;
+
+	return p && path && strcmp(p, path) == 0;
+}
+
 /**
  * mnt_fs_get_tag:
  * @fs: fs
@@ -1061,7 +1107,7 @@ int mnt_fs_match_target(mnt_fs *fs, cons
 		return 0;
 
 	/* 1) native paths */
-	rc = !strcmp(target, fs->target);
+	rc = mnt_fs_streq_target(fs, target);
 
 	if (!rc && cache) {
 		/* 2) - canonicalized and non-canonicalized */
@@ -1104,7 +1150,7 @@ int mnt_fs_match_source(mnt_fs *fs, cons
 		return 0;
 
 	/* 1) native paths/tags */
-	if (!strcmp(source, fs->source))
+	if (mnt_fs_streq_srcpath(fs, source))
 		return 1;
 
 	if (!cache)
@@ -1118,7 +1164,7 @@ int mnt_fs_match_source(mnt_fs *fs, cons
 
 	/* 2) canonicalized and native */
 	src = mnt_fs_get_srcpath(fs);
-	if (src && !strcmp(cn, src))
+	if (src && mnt_fs_streq_srcpath(fs, cn))
 		return 1;
 
 	/* 3) canonicalized and canonicalized */
diff -up util-linux-ng-2.17.2/shlibs/mount/src/mountP.h.kzak util-linux-ng-2.17.2/shlibs/mount/src/mountP.h
--- util-linux-ng-2.17.2/shlibs/mount/src/mountP.h.kzak	2014-06-12 12:40:30.643000001 +0200
+++ util-linux-ng-2.17.2/shlibs/mount/src/mountP.h	2014-06-12 14:25:07.768010039 +0200
@@ -201,4 +201,8 @@ extern mnt_fs *mnt_copy_mtab_fs(const mn
 extern int __mnt_fs_set_source_ptr(mnt_fs *fs, char *source);
 extern int __mnt_fs_set_fstype_ptr(mnt_fs *fs, char *fstype);
 
+/* backport for RHEL6.6 */
+extern int mnt_fs_streq_target(mnt_fs *fs, const char *path);
+extern int mnt_fs_streq_srcpath(mnt_fs *fs, const char *path);
+
 #endif /* _LIBMOUNT_PRIVATE_H */
diff -up util-linux-ng-2.17.2/shlibs/mount/src/tab.c.kzak util-linux-ng-2.17.2/shlibs/mount/src/tab.c
--- util-linux-ng-2.17.2/shlibs/mount/src/tab.c.kzak	2014-06-12 12:40:30.652000001 +0200
+++ util-linux-ng-2.17.2/shlibs/mount/src/tab.c	2014-06-12 14:29:30.008998779 +0200
@@ -434,7 +434,7 @@ mnt_fs *mnt_tab_find_target(mnt_tab *tb,
 	/* native @target */
 	mnt_reset_iter(&itr, direction);
 	while(mnt_tab_next_fs(tb, &itr, &fs) == 0)
-		if (fs->target && strcmp(fs->target, path) == 0)
+		if (mnt_fs_streq_target(fs, path))
 			return fs;
 
 	if (!tb->cache || !(cn = mnt_resolve_path(path, tb->cache)))
@@ -443,7 +443,7 @@ mnt_fs *mnt_tab_find_target(mnt_tab *tb,
 	/* canonicalized paths in mnt_tab */
 	mnt_reset_iter(&itr, direction);
 	while(mnt_tab_next_fs(tb, &itr, &fs) == 0) {
-		if (fs->target && strcmp(fs->target, cn) == 0)
+		if (mnt_fs_streq_target(fs, cn))
 			return fs;
 	}
 
@@ -494,10 +494,9 @@ mnt_fs *mnt_tab_find_srcpath(mnt_tab *tb
 	/* native paths */
 	mnt_reset_iter(&itr, direction);
 	while(mnt_tab_next_fs(tb, &itr, &fs) == 0) {
-		p = mnt_fs_get_srcpath(fs);
-		if (p && strcmp(p, path) == 0)
+		if (mnt_fs_streq_srcpath(fs, path))
 			return fs;
-		if (!p)
+		if (!mnt_fs_get_srcpath(fs))
 			/* mnt_fs_get_srcpath() returs nothing, it's TAG */
 			ntags++;
 	}
@@ -509,8 +508,7 @@ mnt_fs *mnt_tab_find_srcpath(mnt_tab *tb
 	if (ntags < mnt_tab_get_nents(tb)) {
 		mnt_reset_iter(&itr, direction);
 		while(mnt_tab_next_fs(tb, &itr, &fs) == 0) {
-			p = mnt_fs_get_srcpath(fs);
-			if (p && strcmp(p, cn) == 0)
+			if (mnt_fs_streq_srcpath(fs, cn))
 				return fs;
 		}
 	}
